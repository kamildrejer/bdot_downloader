# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BdotDowloader
                                 A QGIS plugin
 pobiera BDOT i uzupełnia bazę danych
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-16
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Kamil Drejer
        email                : kamil.drejer@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

#DownloadBdotTask ############# -             -----         -      -          import!!

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .bdot_downloader_dialog import BdotDowloaderDialog
import os, os.path, zipfile
from .task_dwnl_bdot import DownloadBdotTask


from qgis.core import QgsProcessing, QgsProcessingContext
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsCoordinateReferenceSystem
import processing

class BdotDowloader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BdotDowloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&BDOT Dowloader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.unpack_files = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BdotDowloader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/bdot_downloader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'BDOT downloader'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&BDOT Dowloader'),
                action)
            self.iface.removeToolBarIcon(action)

    def pakuj(self, path, dest):
        dir_name = path
        extension = ".zip"
        dest = dest
        # print(self.dir_name)
        try:
            os.chdir(dir_name) # change directory from working dir to dir with files
        except:
            return

        for i in range(0,1):
            for item in os.listdir(dir_name): # loop through items in dir
                try:
                    os.chdir(dir_name) # change directory from working dir to dir with files
                except:
                    return
                if item.endswith(extension): # check for ".zip" extension
                    file_name = os.path.abspath(item) # get full path of files
                    if os.path.exists(file_name):
                        try:
                            zip_ref = zipfile.ZipFile(file_name) # create zipfile object
                            zip_ref.extractall(dest) # extract file to dir
                            zip_ref.close() # close file
                            os.remove(file_name) # delete zipped file
                        except zipfile.BadZipfile:
                            self.unpack_files.append(file_name)

                        # for item2 in os.listdir(os.path.join(self.dir_name,item[:2])): # loop through items in dir
                        self.pakuj(os.path.join(dir_name,str(item[:2])), dest)

    def zrob_liste(self, path, endswith):
        self.dir_name = path
        self.endswith = endswith
        self.lista_warstw = []
        # print(self.dir_name)

        for item in os.listdir(self.dir_name): # loop through items in dir
            for end in self.endswith:
                if item.endswith(end): # check for ".zip" extension
                    # print(item)
                    self.lista_warstw.append(item)
                    print(item)
        return self.lista_warstw

    def zlacz(self, dir_name, layers, warstwa, context, czy_ucinac_kolumny, lista_kodow_str):#, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        # feedback = QgsProcessingMultiStepFeedback(1, model_feedback)

        layers = [os.path.join(dir_name, layer) for layer in layers]

        results = []
        outputs = {}
        self.warstwa = warstwa

        if czy_ucinac_kolumny:
            for layer in layers:
                alg_params = {
                    'FIELDS': ['X_KOD'],
                    'INPUT': layer,
                    # 'OUTPUT': 'C:/Users/klamo/Downloads/proba_bdot/wwww.shp',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['ZachowajPola'] = processing.run('native:retainfields', alg_params, context=context, is_child_algorithm=True)
                results.append(outputs['ZachowajPola']['OUTPUT'] )
                #print(results)
        else:
            results = layers

        # Złącz warstwy wektorowe
        # output = dir_name+

        alg_params = {
            'CRS': QgsCoordinateReferenceSystem('EPSG:2180'),
            'LAYERS': results,   #self.layers,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT, #'ogr:dbname=\'C:/Users/klamo/Downloads/proba_bdot/warstwyBDOT10k.gpkg\' table="{}" (geom)'.format(self.warstwa.replace('.shp',''   )),
            # 'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ZczWarstwyWektorowe'] = processing.run('native:mergevectorlayers', alg_params, context=context, is_child_algorithm=True)
        # results['Wynik'] = self.outputs['ZczWarstwyWektorowe']['OUTPUT']

        alg_params = {
            'EXPRESSION': lista_kodow_str,
            'INPUT': outputs['ZczWarstwyWektorowe']['OUTPUT'], #'G:/Dyski współdzielone/1133_[STEŚ]_Maków Mazowiecki/09_Powietrze/Izolinie/olow_rok.shp',
            'OUTPUT': 'ogr:dbname=\'C:/Users/klamo/Downloads/proba_bdot/warstwyBDOT10k_pre.gpkg\' table="{}" (geom)'.format(self.warstwa.replace('.shp',''   )),
        }
        outputs['WyodrbnijZaPomocWyraenia'] = processing.run('native:extractbyexpression', alg_params, context=context, is_child_algorithm=True)

        # return outputs['ZczWarstwyWektorowe']['OUTPUT'] #self.results['Wynik']

    # def wyodrebnij(self, lista_kodow_str):
    #     results = {}
    #     outputs = {}
    #
    #     # Wyodrębnij za pomocą wyrażenia
    #     alg_params = {
    #         'EXPRESSION': lista_kodow_str,
    #         'INPUT': 'G:/Dyski współdzielone/1133_[STEŚ]_Maków Mazowiecki/09_Powietrze/Izolinie/olow_rok.shp',
    #         'OUTPUT': 'ogr:dbname=\'C:/Users/klamo/Downloads/proba_bdot/warstwyBDOT10k.gpkg\' table="{}" (geom)'.format(self.warstwa.replace('.shp',''   )),
    #     }
    #     outputs['WyodrbnijZaPomocWyraenia'] = processing.run('native:extractbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
    #     results['Wynik'] = outputs['WyodrbnijZaPomocWyraenia']['OUTPUT']

    def make_input(self):
        self.lista_warstw_wyjsciowych = set()
        self.lista_warstw_wejsciowych = []
        lista_warstw_do_laczenia_all = ['ADJA_A.shp','ADMS_A.shp','ADMS_P.shp','BUBD_A.shp','BUCM_A.shp','BUHD_A.shp','BUHD_L.shp','BUIB_A.shp','BUIB_L.shp','BUIN_L.shp','BUIT_A.shp','BUIT_P.shp','BUSP_A.shp','BUSP_L.shp','BUTR_L.shp','BUTR_P.shp','BUUO_L.shp','BUWT_P.shp','BUZM_L.shp','BUZT_A.shp','BUZT_P.shp','KUHU_A.shp','KUHU_P.shp','KUIK_A.shp','KUKO_A.shp','KUKO_P.shp','KUMN_A.shp','KUOS_A.shp','KUOZ_A.shp','KUPG_A.shp','KUPG_P.shp','KUSC_A.shp','KUSK_A.shp','KUZA_A.shp','OIKM_P.shp','OIMK_A.shp','OIOR_A.shp','OIOR_L.shp','OIOR_P.shp','OIPR_L.shp','OIPR_P.shp','OISZ_A.shp','PTGN_A.shp','PTKM_A.shp','PTLZ_A.shp','PTNZ_A.shp','PTPL_A.shp','PTRK_A.shp','PTSO_A.shp','PTTR_A.shp','PTUT_A.shp','PTWP_A.shp','PTWZ_A.shp','PTZB_A.shp','SKDR_L.shp','SKJZ_L.shp','SKRP_L.shp','SKRW_P.shp','SKTR_L.shp','SULN_L.shp','SUPR_L.shp','SWKN_L.shp','SWRM_L.shp','SWRS_L.shp','TCON_A.shp','TCRZ_A.shp','ADJA_A.shp','ADMS_A.shp','ADMS_P.shp','BUBD_A.shp','BUCM_A.shp','BUHD_L.shp','BUIB_A.shp']
        self.lista_warstw_do_laczenia  = []
        #self.lista_kodow = []
        self.lista_kodow_str = []
        element_menu = self.dlg.get_menu_status()
        for wiersz in element_menu:
            self.lista_warstw_wyjsciowych.add(wiersz[3]) #dodaj unikalne warstwy wyj.
        i=0
        for warstwa in self.lista_warstw_wyjsciowych: 
            self.lista_warstw_wejsciowych.append({'warstwy':[], 'lista_kodow_str' : '', 'wyjscie':''})
            self.lista_kodow_str.append('')
            for wiersz in element_menu:
                if warstwa == wiersz[3] and wiersz[2] == True:      
                    self.lista_warstw_wejsciowych[i]['warstwy'].append(wiersz[0])
                    self.lista_warstw_wejsciowych[i]['wyjscie'] = warstwa
                    if len(self.lista_warstw_wejsciowych[i]['lista_kodow_str']) == 0:
                        self.lista_warstw_wejsciowych[i]['lista_kodow_str'] += '\"X_KOD\"=' + "\'{}\'".format(wiersz[0])
                    else:
                        self.lista_warstw_wejsciowych[i]['lista_kodow_str'] += ' OR \"X_KOD\"=' + "\'{}\'".format(wiersz[0])
                #print(self.lista_kodow_str[i])
            i+=1
        i = 0

        for warstwy_wejsciowe in self.lista_warstw_wejsciowych:
            if len(warstwy_wejsciowe['warstwy'])>0:
                #print('warstwa wejsciowa: ' +str(warstwy_wejsciowe['warstwa']))
                #print(len(warstwy_wejsciowe['warstwa']))
                self.lista_warstw_do_laczenia.append({'warstwy' : set(), 'wyjsciowa' : warstwy_wejsciowe['wyjscie'], 'lista_kodow_str':warstwy_wejsciowe['lista_kodow_str']} )###########
                for warstwa_wejsciowa in warstwy_wejsciowe['warstwy']:
                    for warstwa_do_laczenia in lista_warstw_do_laczenia_all:
                        
                        if warstwa_wejsciowa[0:4] in warstwa_do_laczenia:                          
                            self.lista_warstw_do_laczenia[i]['warstwy'].add(warstwa_do_laczenia)
                if len(self.lista_warstw_do_laczenia[i]['warstwy']) == 0:
                    print(str(warstwa_wejsciowa[0:4]))
                i+=1
        print(self.lista_warstw_do_laczenia)
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = BdotDowloaderDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.make_input()
            dir_name = 'Z:\\001-Dzialki_dla_OZE\\01_dane_wejsciowe\\Polska'
            dest = 'C:\\Users\\klamo\\Downloads\\Polska'

            # self.pakuj(dir_name, dest)
            # print(self.unpack_files)
            a=0
            for warstwy in self.lista_warstw_do_laczenia:
                a+=1
                print(warstwy)
                #context = QgsProcessingContext()
                lista = self.zrob_liste(dir_name, warstwy['warstwy'])
                print(lista)
                #print('lista: '+ str(lista))
                #print('warstwy: '+ str(warstwy))
                #self.zlacz(dir_name, lista, warstwy, context, False, self.lista_kodow_str[a])


            #lista_kodow = []
            #lista_kodow_str = ''
            #lista_menu = self.dlg.get_menu_status()
            #for element_menu in lista_menu:
            #    if element_menu[2] == True:
            #        lista_kodow.append(element_menu[0])
            #        if len(lista_kodow_str) == 0:
            #            lista_kodow_str += '\"X_KOD\"=' + "\'{}\'".format(element_menu[0])
            #        else:
            #            lista_kodow_str += ' OR \"X_KOD\"=' + "\'{}\'".format(element_menu[0])
            #print(lista_kodow_str)
            # checkBoxList = ['2475','2412','2466','2468','0402','0463','0416','2411','2403','1607','0261','0225','1422','1461','3025','3006','2262','3263','0207','1008','1661','2815','2471','1429','2609','1807','2006','1815','1410','1418','1425','1427','1404','1405','0611','0618','0662','1202','1261','1020','0807','1810','1601','3018','1463','1438','3016','3013','1464','3063','3009','2062','3022','3023','2206','2613','3214','0264','2806','2810','0203','3202','2462','0226','0223','0213','0211','0408','0419','0411','0410','2801','2417','2011','1805','1602','1210','1063','0810','2261','1061','1010','2213','3062','3064','3010','0464','1863','3210','1813','1862','1432','0619','0663','1201','1263','0812','0803','3015','3028','2003','2012','2212','2607','2610','2205','2404','2474','2861','3206','2416','2463','2469','0201','0265','0413','2005','1203','3262','2211','1013','1005','1015','2807','0861','1416','1430','0407','1816','2007','0406','1818','1864','1420','1426','1403','1409','0604','0607','0610','0612','0616','0664','1206','1018','0811','1606','3002','1462','2004','2611','2605','2804','2811','2812','2472','3201','2406','2405','2407','2461','0262','0222','0415','2415','1821','1801','1610','0224','1411','2410','2818','0219','1007','2264','2203','3017','3061','1413','0801','0409','1812','1820','1414','1421','1401','1435','0602','0603','0613','0617','1002','1006','1806','1608','1611','3031','2063','3011','3005','3024','2661','2805','0202','2214','3208','3261','2409','0214','0217','0417','2808','2002','2001','0221','0208','2477','2473','3212','1861','0862','0809','1819','1412','1436','1437','0609','1214','1219','1014','1021','0806','0808','1808','1809','3001','3014','1604','2602','3004','2603','3007','2010','2204','2817','3218','2414','3211','0216','2467','1217','1211','0212','1408','2813','1016','2014','2401','3207','1423','0206','0805','1216','1406','0608','0614','0615','0661','1262','3019','2013','2601','3026','3008','3027','2606','2263','2608','3209','2402','2819','0204','2216','2207','2465','2470','0405','0401','3020','2009','1817','1215','1434','2408','3204','1609','3217','3203','2202','2413','2208','2201','1402','3205','3021','0802','0414','1803','1419','1424','1428','0601','0606','0620','1001','1003','1004','1009','1012','1019','0804','1804','1811','1465','1605','2008','2604','3030','3003','2209','2809','2814','3213','2803','2464','0220','0403','0215','0218','0209','0461','0462','0412','1205','0210','1218','1415','2479','2210','0205','1433','2215','2612','0418','1204','0404','1814','1417','1407','0605','1207','1208','1209','1212','1213','1062','1011','1017','1802','1603','3012','2061','3029','3215','3216','2816','2476','2478','2862','2802']
            # # Do something useful here - delete the line containing pass and
            # substitute with your code.

            # task = DownloadBdotTask(
            #     description="Pobieranie paczek BDOT10k",
            #     downloadPath=r"C:\Users\klamo\Downloads\bdot",
            #     bdot10kDataFormat='SHP',
            #     checkBoxList=checkBoxList,
            #     iface=self.iface
            #)


            
            #['SWRM_L.shp', 'SULN_L.shp','SUPR_L.shp','KUPG_A.shp','KUHU_A.shp','SKDR_L.shp','OIMK_A.shp','PTLZ_A.shp', 'BUBD_A.shp']:

            # zagospodarowanie ['PTGN_A.shp','PTKM_A.shp','PTLZ_A.shp','PTNZ_A.shp','PTPL_A.shp','PTRK_A.shp','PTSO_A.shp','PTTR_A.shp','PTUT_A.shp','PTWP_A.shp','PTWZ_A.shp','PTZB_A.shp']: #pokrycie

            # do analizy dzialek ['BUBD_A.shp', 'SWRM_L.shp', 'SULN_L.shp','SUPR_L.shp','KUPG_A.shp','KUHU_A.shp','SKDR_L.shp','OIMK_A.shp','PTLZ_A.shp']:

            #['BUBD_A.shp','BUCM_A.shp','BUZT_A.shp','KUHU_A.shp','KUIK_A.shp','KUKO_A.shp','KUMN_A.shp','KUOS_A.shp','KUOZ_A.shp','KUPG_A.shp','KUSC_A.shp','KUSK_A.shp','KUZA_A.shp','OIMK_A.shp','OIOR_A.shp','OIOR_L.shp','OIOR_P.shp','OISZ_A.shp','SKDR_L.shp','SKJZ_L.shp','SKTR_L.shp','SULN_L.shp','SUPR_L.shp','SWKN_L.shp','SWRM_L.shp','SWRS_L.shp']:

            #pokrycie ['PTGN_A.shp','PTKM_A.shp','PTLZ_A.shp','PTNZ_A.shp','PTPL_A.shp','PTRK_A.shp','PTSO_A.shp','PTTR_A.shp','PTUT_A.shp','PTWP_A.shp','PTWZ_A.shp','PTZB_A.shp']:

            #kompleksy []


